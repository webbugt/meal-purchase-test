// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["base", "auth"]
}

model Label {
  id     Int           @id @default(autoincrement())
  title  String        @db.VarChar(255)
  img    String?
  meales LabelOnMeal[]
  
  @@schema("base")
}

model LabelOnMeal {
  meal       Meal     @relation(fields: [mealId], references: [id])
  mealId     Int
  label      Label    @relation(fields: [labelId], references: [id])
  labelId    Int
  assignedAt DateTime @default(now())

  @@id([mealId, labelId])
  @@schema("base")
}

model Meal {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String        @db.VarChar(255)
  starter     String?       @db.VarChar(255)
  desert      String?       @db.VarChar(255)
  description String?
  published   Boolean       @default(false)
  img         String?
  price       Float
  labels      LabelOnMeal[]
  drinks      DrinkOnMeal[]
  @@schema("base")
}

model DrinkOnMeal {
  meal       Meal     @relation(fields: [mealId], references: [id])
  mealId     Int
  drink      Drink    @relation(fields: [drinkId], references: [id])
  drinkId    Int
  assignedAt DateTime @default(now())

  @@id([mealId, drinkId])
  @@schema("base")
}

model Drink {
  id     Int           @id @default(autoincrement())
  title  String        @db.VarChar(255)
  img    String?
  price  Float
  meales DrinkOnMeal[]
  @@schema("base")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  
  @@schema("auth")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]

  @@schema("auth")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@schema("auth")
}